L'État de Go
Nous sommes en Février 2017

Présentation originale de
Francesc Campoy
Google Developer Advocate
@francesc
campoy@golang.org

Traduite et adaptée par
Alexandre Jomin et Sébastien Friess

* Le temps passe

Go 1.6 à un an (Joyeux Anniversaire!)

Go 1.7 à déjà 6 mois!

Go 1.8 ne devrait plus tarder.

Go 1.8 Candidate Release 3 à été livré le 26 Janvier.

.image state-of-go/img/flying.png

* Notes

La présentation originale est disponible ici [[https://talks.golang.org/2017/state-of-go.slide]]
La présentation modifiée ici [[https://github.com/sebastienfr/talks/blob/master/2017/state-of-go.slide]]

Les exemples de code ne fonctionnerons pas sauf en local et en Go 1.8

Pour le moment le playground est toujours en Go 1.7.

* Ordre du jour

Modifications depuis Go 1.7:

- Le Langage
- Le Runtime
- Le Tooling
- La Bibliothèque Standard
- La Communauté

* Les changements du langage

* Règles de conversion

Combien de fois vos êtes vous retrouvez avec deux types *presque* égaux ?

Disons que nous définissons une `Person`:

.code state-of-go/stdlib/json_old.go /type Person/,/^}/

Et que vous avez aussi pour le JSON :

.code state-of-go/stdlib/json_old.go /var aux/,/}/

* Règles de conversion

Pour convertir `aux` vers `Person` vous devez :

.code state-of-go/stdlib/json_old.go /type Person/,/}/

    return Person{
        Name:     aux.Name,
        AgeYears: aux.AgeYears,
        SSN:      aux.SSN
    }

* Règles de conversion

Depuis Go 1.8 vous pouvez simplement :

    return Person(aux)

Les deux types doivent respecter les règles suivantes :

- la même *séquence* de champs (l'ordre est important)
- les champs correspondant doivent être du même type

* Portage vers d'autres plateforme

32-bit MIPS

- big-endian (`linux/mips`)
- little-endian (`linux/mipsle`) - nécessite une unité de calcul en virgule flottante

Go sur DragonFly BSD nécessite maintenant DragonFly 4.4.4+.

Go on OpenBSD nécessite maintenant OpenBSD 5.9+.

Le support de Plan 9 est maintenant meilleur !

* Portage vers d'autres plateforme

Go 1.8 supporte OS X 10.8+. Comme nous supportions précedemment 10.8.

ARM:

- Go 1.8 est la dernière version supportant les processeurs ARMv5E and ARMv6.

- Go 1.9 néssitera ARMv6K. Est-ce que Go va fonctionner avec ma platefornme ?

    go tool dist -check-armv6k

* Tools

* Fix

Corrige le chemin d'import de `"golang.org/x/net/context"` à `"context"`.

.code state-of-go/tools/gofix.go

Exécutez simplement la commande ci-dessous :

.play state-of-go/tools/gofix.sh /go tool/

Enlever l'argument `-diff` pour réécrire vos fichiers.

* Vet

"Vet est plus strict dans certain cas et plus cool là où il causait de faux positifs"

Example d'extra check:

.play -edit state-of-go/tools/govet.go /func main/,

`govet` détecte le problème statiquement:

.play state-of-go/tools/govet.sh /go vet/

* SSA partout!

Le backend SSA:

- génère du code plus compacte et plus efficace
- est une meilleure plateforme de compilation pour les optimizations

Pour les systèmes ARM 32-bit, cela représente une augmentation des performances de 20-30% !

Pour les autres (où SSA était déjà utilisé) les gains sont de l'ordre de 0-10%.

* SSA partout

.image state-of-go/img/benchmark.png _ 800

* Le GOPATH par défaut

Yeah!

Quand le `GOPATH` n'est pas défini, l'outil utilisera :

- `$HOME/go` sur Unix
- `%USERPROFILE%\go` sur Windows

* go bug

Plus facile de créer des rapports de bug avec les informations utiles.

Exemple:

.play state-of-go/tools/gobug.sh /go bug/

* Runtime

* Détection des accès concurrents sur les maps

Amélioration de Go 1.6.

.play state-of-go/runtime/mapcrash.go /const/,/Wait\(\)/

Sortie:

	fatal error: concurrent map read and map write
	fatal error: concurrent map writes

* Profiling des contentions sur les Mutex

Profilez vos benchmarks et la contention sur vos Mutex.

    go test -bench=. -mutexprofile=mutex.out

Sinon vous pouvez aussi activer le profiling avec cette nouvelle méthode.

    runtime.SetMutexProfileFraction

_NB_: Pour le moment les `sync.RWMutex` non sont pas profilés.

* Performance

* Historique du GC en tweets

* go 1.5

.image state-of-go/img/gct1.png _ 900

* go 1.6

.image state-of-go/img/gct2.png _ 900

* go 1.7

.image state-of-go/img/gct4.png _ 900

* go 1.8 (beta 1)

.image state-of-go/img/gct5.png _ 700

* go 1.8 (beta 1) CPU

.image state-of-go/img/gctcpu.png _ 800

* defer est plus rapide

    name         old time/op  new time/op  delta
    Defer-4       101ns ± 1%    66ns ± 0%  -34.73%  (p=0.000 n=20+20)
    Defer10-4    93.2ns ± 1%  62.5ns ± 8%  -33.02%  (p=0.000 n=20+20)
    DeferMany-4   148ns ± 3%   131ns ± 3%  -11.42%  (p=0.000 n=19+19)

.image state-of-go/img/defer.png _ 500

* cgo est aussi plus rapide !

    name       old time/op  new time/op  delta
    CgoNoop-8  93.5ns ± 0%  51.1ns ± 1%  -45.34%  (p=0.016 n=4+5)

.image state-of-go/img/cgo.png _ 500

Source: [[https://dave.cheney.net/2016/11/19/go-1-8-toolchain-improvements][dave.cheney.net]]

* Les changements de la Bibliothèque Standard

* Tri

Exercice:

Étant donné un slice de `Person`

    var p []Person

Affichez la slice triée par nom, age et numéro de sécurité sociale.

.code state-of-go/stdlib/sort/sort_test.go /sort.Sort/,/bySSN/

Facile, non?

* Tri

Ah oui, vous avez oublié un morceau là ...

.code state-of-go/stdlib/sort/sort_test.go /byName/,/bySSN\) Swap/

* sort.Slice

Depuis Go 1.8 vous pouvez simplement écrire :

.code state-of-go/stdlib/sort/sort_test.go /sort\.Slice/,/SSN/

Il existe aussi des nouveaux `SliceStable` et `SliceIsSorted`.

* Plugins

Définir un plugin:

.code state-of-go/stdlib/plugin/plugin.go

Compilez-le:

    go build -buildmode=plugin

_NB_: Ne fonctionne que sur Linux pour le moment

* Plugins

.code state-of-go/stdlib/plugin/main.go /plugin.Open/,/Hello/

* Plugins démo

Démo video: [[https://twitter.com/francesc/status/827851085943566336][twitter.com/francesc]]

Source code: [[https://github.com/campoy/golang-plugins][github.com/campoy/golang-plugins]]

* HTTP shutdown

Ajout de la méthode `Shutdown` à `http.Server`.

Exemple:

Appelez `Shutdown` quand un signal est reçu :

.code state-of-go/stdlib/shutdown.go /subscribe/,/}\(\)/

* HTTP shutdown

Vérifiez pourquoi le serveur s'est arrêté.

.code state-of-go/stdlib/shutdown.go /HandleFunc/,/gracefully/


* HTTP/2

`http.Response` implémente maintenant l'interface `http.Pusher`.

    type Pusher interface {
        Push(target string, opts *PushOptions) error
    }

Un exemple simple:

.code state-of-go/stdlib/http2/http2.go /func rootHandler/,/^}/

* HTTP/2

.play state-of-go/stdlib/http2/http2.go /func main/,/^}/

HTTP: [[http://localhost:8080]]
HTTP/2: [[https://localhost:8081]]

* HTTP/2

HTTP

.image state-of-go/img/http.png _ 800

HTTP/2

.image state-of-go/img/http2.png _ 800

* Support étendu des contextes

Depuis Go 1.7:

- net
- net/http
- os/exec

Depuis Go 1.8:

- http.Server.Shutdown
- database/sql
- net.Resolver

* Quelques autres changements pour la route

.image state-of-go/img/more.png _ 1000
.caption [[https://beta.golang.org/doc/go1.8][Go 1.8 release notes]]

* La communauté

* Women Who Go

.image state-of-go/img/wwg.png _ 800
.caption 17 communautés déjà! [[http://www.womenwhogo.org]]

* Go meetups

.image state-of-go/img/meetups.png _ 900
.caption Gophers all around the world! [[http://go-meetups.appspot.com]]

* Conferences:

- [[https://fosdem.org/2017/][FOSDEM]], right here right now!
- [[http://www.gophercon.in/][GopherCon India]], Feb 25-25th
- [[https://gophercon.com/][Gophercon Denver]], Jul 12-15th
- [[http://golanguk.com/][Golang UK]], August 16th-18th
- [[http://2017.dotgo.eu/][dotGo]], Nov 6th

* Go 1.8 release party, 16 février

Go 1.8 bientôt près de chez vous !

Les meetups Go de la Release Party [[https://github.com/golang/go/wiki/Go-1.8-release-party][release party]]

.image state-of-go/img/party-gopher.png _ 300
.caption Merci de vos attention !!!
